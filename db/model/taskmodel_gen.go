// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskFieldNames          = builder.RawFieldNames(&Task{})
	taskRows                = strings.Join(taskFieldNames, ",")
	taskRowsExpectAutoSet   = strings.Join(stringx.Remove(taskFieldNames, "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	taskRowsWithPlaceHolder = strings.Join(stringx.Remove(taskFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"
)

type (
	taskModel interface {
		Insert(ctx context.Context, data *Task) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Task, error)
		Update(ctx context.Context, data *Task) error
		Delete(ctx context.Context, id string) error
	}

	defaultTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Task struct {
		Id         string         `db:"id"`          // task id, the primary key of a task
		Name       string         `db:"name"`        // task name
		TaskType   string         `db:"task_type"`   // the type of task
		Input      sql.NullString `db:"input"`       // task input
		Output     sql.NullString `db:"output"`      // task output
		CommitTime sql.NullInt64  `db:"commit_time"` // the time (ms) of the user apply the task
		BeginTime  sql.NullInt64  `db:"begin_time"`  // the time (ms) of the task begin
		EndTime    sql.NullInt64  `db:"end_time"`    // the time (ms) of the task finished
		Status     sql.NullString `db:"status"`      // the task status
		WorkerId   sql.NullString `db:"worker_id"`   // the worker_id which execute this task
	}
)

func newTaskModel(conn sqlx.SqlConn) *defaultTaskModel {
	return &defaultTaskModel{
		conn:  conn,
		table: "`task`",
	}
}

func (m *defaultTaskModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTaskModel) FindOne(ctx context.Context, id string) (*Task, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskRows, m.table)
	var resp Task
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskModel) Insert(ctx context.Context, data *Task) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.TaskType, data.Input, data.Output, data.CommitTime, data.BeginTime, data.EndTime, data.Status, data.WorkerId)
	return ret, err
}

func (m *defaultTaskModel) Update(ctx context.Context, data *Task) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.TaskType, data.Input, data.Output, data.CommitTime, data.BeginTime, data.EndTime, data.Status, data.WorkerId, data.Id)
	return err
}

func (m *defaultTaskModel) tableName() string {
	return m.table
}
