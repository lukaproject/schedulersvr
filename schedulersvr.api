type (
	TaskContent {
		Id         string `json:"id"`
		Name       string `json:"name"`
		TaskType   string `json:"task_type"`
		Input      string `json:"input,optional"`
		Output     string `json:"output,optional"`
		CommitTime uint64 `json:"commit_time,optional"`
		BeginTime  uint64 `json:"begin_time,optional"`
		EndTime    uint64 `json:"end_time,optional"`
		Status     string `json:"status,optional"`
		WorkerId   string `json:"worker_id,optional"`
	}

	TaskTypeContent {
		Id                string `json:"id"`
		Name              string `json:"name"`
		MaxTaskInQueLimit int64  `json:"max_task_in_que_limit"`
		CreateTime        int64  `json:"create_time"`
		ExtraInfo         string `json:"extra_info,optional"`
	}

	WorkerContent {
		Id       string `json:"id,optional"`
		Name     string `json:"name"`
		TaskType string `json:"task_type"`
		Info     string `json:"info,optional"`
		Status   string `json:"status,optional"`
	}

	AddTaskReq {
		SessionId string `json:"session_id"`
		Name      string `json:"name"`
		Input     string `json:"input"`
		TaskType  string `json:"task_type"`
	}

	AddTaskResp {
		SessionId string `json:"session_id"`
		Name      string `json:"name"`
		TaskId    string `json:"task_id"`
	}

	GetTaskReq {
		SessionId string `json:"session_id"`
		TaskId    string `json:"task_id"`
	}

	GetTaskResp {
		SessionId string      `json:"session_id"`
		Task      TaskContent `json:"task"`
	}

	FetchTaskReq {
		SessionId string `json:"session_id"`
		TaskType  string `json:"task_type"`
		WorkerId  string `json:"worker_id"`
	}

	FetchTaskResp {
		SessionId string      `json:"session_id"`
		Task      TaskContent `json:"task"`
	}

	UpdateTaskReq {
		SessionId string      `json:"session_id"`
		Task      TaskContent `json:"task"`
	}

	GeneralResp {
		SessionId string `json:"session_id"`
		ErrorMsg  string `json:"error_msg,optional"`
	}

	HeartBeatReq {
		SessionId string        `json:"session_id"`
		Worker    WorkerContent `json:"worker"`
	}

	HeartBeatResp {
		SessionId string `json:"session_id"`
		ErrorMsg  string `json:"error_msg,optional"`
	}

	AddTaskTypeReq {
		SessionId         string `json:"session_id"`
		Name              string `json:"name"`
		MaxTaskInQueLimit int64  `json:"max_task_in_que_limit"`
		ExtraInfo         string `json:"extra_info,optional"`
	}

	GetTaskTypeReq {
		SessionId string `json:"session_id"`
		Name      string `json:"name"`
	}

	GetTaskTypeResp {
		SessionId string          `json:"session_id"`
		TaskType  TaskTypeContent `json:"task_type"`
	}

	DeleteTaskTypeReq {
		SessionId string `json:"session_id"`
		Name      string `json:"name"`
	}
)

service SchedulerSvr {
	@doc(
		summary: add a task to scheduler make it waiting for scheduling.
	)
	@handler AddTask
	post /api/addTask (AddTaskReq) returns (AddTaskResp)
	
	@doc(
		summary: get the task info from scheduler. [everytime]
	)
	@handler GetTask
	put /api/getTask (GetTaskReq) returns (GetTaskResp)
	
	@doc(
		summary: add a new task type
	)
	@handler AddTaskType
	post /api/addTaskType (AddTaskTypeReq) returns (GeneralResp)
	
	@doc(
		summary: get the task type
	)
	@handler getTaskType
	put /api/getTaskType (GetTaskTypeReq) returns (GetTaskTypeResp)
	
	@doc(
		summary: delete the task type by name
	)
	@handler deleteTaskType
	put /api/deleteTaskType (DeleteTaskTypeReq) returns (GeneralResp)
	
	@doc(
		summary: this api is for worker. to fetch the same task_type's task from scheduler.
	)
	@handler FetchTask
	put /worker/fetchTask (FetchTaskReq) returns (FetchTaskResp)
	
	@doc(
		summary: this api this for worker. After worker finished a task, upload the result to scheduler for saved.
	)
	@handler UpdateTask
	post /worker/updateTask (UpdateTaskReq) returns (GeneralResp)
	
	@doc(
		summary: the worker send heartbeat to the scheduler, to keep the task will be scheduled to this worker.
	)
	@handler HeartBeat
	post /worker/heartBeat (HeartBeatReq) returns (HeartBeatResp)
}