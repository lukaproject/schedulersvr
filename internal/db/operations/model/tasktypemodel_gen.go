// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskTypeFieldNames          = builder.RawFieldNames(&TaskType{})
	taskTypeRows                = strings.Join(taskTypeFieldNames, ",")
	taskTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(taskTypeFieldNames, "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	taskTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(taskTypeFieldNames, "`task_type_id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"
)

type (
	taskTypeModel interface {
		Insert(ctx context.Context, data *TaskType) (sql.Result, error)
		FindOne(ctx context.Context, taskTypeId string) (*TaskType, error)
		FindOneByTaskTypeName(ctx context.Context, taskTypeName string) (*TaskType, error)
		Update(ctx context.Context, data *TaskType) error
		Delete(ctx context.Context, taskTypeId string) error
	}

	defaultTaskTypeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TaskType struct {
		TaskTypeId        string `db:"task_type_id"`          // task type id
		TaskTypeName      string `db:"task_type_name"`        // task type name
		MaxTaskInQueLimit int64  `db:"max_task_in_que_limit"` // the max task waiting for scheduled, -1 for unlimited
		CreateTime        int64  `db:"create_time"`           // this task type create time(unix second)
		ExtraInfo         string `db:"extra_info"`
	}
)

func newTaskTypeModel(conn sqlx.SqlConn) *defaultTaskTypeModel {
	return &defaultTaskTypeModel{
		conn:  conn,
		table: "`task_type`",
	}
}

func (m *defaultTaskTypeModel) Delete(ctx context.Context, taskTypeId string) error {
	query := fmt.Sprintf("delete from %s where `task_type_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, taskTypeId)
	return err
}

func (m *defaultTaskTypeModel) FindOne(ctx context.Context, taskTypeId string) (*TaskType, error) {
	query := fmt.Sprintf("select %s from %s where `task_type_id` = ? limit 1", taskTypeRows, m.table)
	var resp TaskType
	err := m.conn.QueryRowCtx(ctx, &resp, query, taskTypeId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskTypeModel) FindOneByTaskTypeName(ctx context.Context, taskTypeName string) (*TaskType, error) {
	var resp TaskType
	query := fmt.Sprintf("select %s from %s where `task_type_name` = ? limit 1", taskTypeRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, taskTypeName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskTypeModel) Insert(ctx context.Context, data *TaskType) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, taskTypeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TaskTypeId, data.TaskTypeName, data.MaxTaskInQueLimit, data.ExtraInfo)
	return ret, err
}

func (m *defaultTaskTypeModel) Update(ctx context.Context, newData *TaskType) error {
	query := fmt.Sprintf("update %s set %s where `task_type_id` = ?", m.table, taskTypeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.TaskTypeName, newData.MaxTaskInQueLimit, newData.ExtraInfo, newData.TaskTypeId)
	return err
}

func (m *defaultTaskTypeModel) tableName() string {
	return m.table
}
